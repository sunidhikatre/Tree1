Start from the root and traverse the tree, comparing val with the current node's value.
If val is smaller, move to the left child; if larger, move to the right child.
Insert the new node when an empty position is found (either left or right child is null), and return the root.

class Solution {
    public TreeNode insertIntoBST(TreeNode root, int val) {
        TreeNode newNode = new TreeNode(val);
        if(root == null){
            return newNode;
        }
        TreeNode curr = root;
        while(true) {
            if(curr.val >= val) {
                if(curr.left == null) {
                    curr.left = new TreeNode(val);
                    break;
                }
                curr = curr.left;

            } else {
                if(curr.right == null) {
                    curr.right = new TreeNode(val);
                    break;
                }
                curr = curr.right;
            }
        }
        return root;
    }
}
