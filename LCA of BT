Recursively traverse the tree, returning the current node if it's either p, q, or null.
Search both left and right subtrees. If both return non-null, the current node is the lowest common ancestor.
If only one of the left or right subtree returns non-null, return that subtree, as it contains the ancestor.


class Solution {
    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
        if(root == null || root==p || root == q) {
            return root;
        }
        TreeNode left = lowestCommonAncestor(root.left,p,q);
        TreeNode right = lowestCommonAncestor(root.right,p,q);

        if(left==null && right!=null){
            return right;
        }
        if(right==null && left!=null){
            return left;
        }
        if(left!=null && right!=null){
             return root;
        }
        return null;
        
    }
}
