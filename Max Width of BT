Breadth-First Search (BFS) Traversal: Perform a level-order traversal using a queue where each node is paired with its index to track position in the current level.
Track Level Width: For each level, compute the width as the difference between the first and last node indices at that level.
Maximize Width: Keep updating the maximum width by comparing it to the width of the current level.


   public int widthOfBinaryTree(TreeNode root) {
         if (root == null) return 0;

        int maxWidth = 0;
        Queue<Pair<TreeNode, Integer>> queue = new LinkedList<>();
        queue.offer(new Pair<>(root, 0));  // Start with the root at index 0

        while (!queue.isEmpty()) {
            int size = queue.size();
            int minIndex = queue.peek().getValue();  // Index of the first node in the level
            int first = 0, last = 0;

            for (int i = 0; i < size; i++) {
                Pair<TreeNode, Integer> current = queue.poll();
                TreeNode node = current.getKey();
                int index = current.getValue() - minIndex; 
                
                if (i == 0) first = index;
                if (i == size - 1) last = index;

                if (node.left != null) {
                    queue.offer(new Pair<>(node.left, 2 * index + 1));
                }
                if (node.right != null) {
                    queue.offer(new Pair<>(node.right, 2 * index + 2));
                }
            }
            maxWidth = Math.max(maxWidth, last - first + 1);
        }

        return maxWidth;
    }
