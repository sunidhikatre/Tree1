Approach: If any subtree is unbalanced (i.e., the height difference between left and right is greater than 1), 
it returns -1 immediately. 
The tree is considered balanced if all subtrees are balanced, otherwise it returns false.

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public boolean isBalanced(TreeNode root) {
       return dfsHeight(root)!=-1;
    }

    int dfsHeight(TreeNode root) {
        if(root == null) {
            return 0;
        }

        int lh = dfsHeight(root.left);
       
        int rh = dfsHeight(root.right);
        
        if(Math.abs(lh-rh)>1) {
            return -1;
        }
        return 1+ Math.max(lh, rh);


    }
}
