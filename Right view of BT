Use a recursive depth-first traversal, prioritizing the right subtree at each level to ensure the rightmost node is captured first for each level.
Maintain a Map where the key is the tree level and the value is the rightmost node at that level.
After traversal, collect the values from the map (which represents the right-side view of the tree).
----------------------------------------------------------------------------------------------------------------------------------------------------------------
class Solution {
    public List<Integer> rightSideView(TreeNode root) {
        List<Integer> rightSideView = new ArrayList<>();
        Map<Integer, Integer> map = new TreeMap<>();
        printRightView(root, 0, map);
        return new ArrayList<>(map.values());
    //    return rightSideView;
    }

    public void printRightView(TreeNode root, int level, Map map) {
        if(root == null){
            return ;
        }

        if(!map.containsKey(level)){
            map.put(level,root.val);
        }
 
        printRightView(root.right, level+1, map);
        printRightView(root.left, level+1, map);

    }
}
