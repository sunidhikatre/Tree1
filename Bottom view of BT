Use breadth-first search (BFS) to traverse the binary tree, keeping track of the horizontal distance (level) of each node.
In the TreeMap, store the latest node encountered at each horizontal level, ensuring the bottommost node is always updated.
After traversal, retrieve the node values from the TreeMap in level order to form the bottom view of the tree.


 public ArrayList <Integer> bottomView(Node root)
    {
          ArrayList<Integer> topView = new ArrayList<>();
        Map<Integer, Node> map = new TreeMap<>();
        map.put(0, root);
        Queue<Pair> q = new LinkedList<>();
        Pair p = new Pair(0,root);
        q.add(p);
        
        if(root==null){
            return topView;
        }
        
        while(!q.isEmpty()) {
            p = q.poll();
            if(p.node.left !=null) {
                Pair newPair = new Pair(p.level-1, p.node.left);
                q.add(newPair);
            //    if(map.containsKey(p.level-1)) {
                    map.put(p.level-1, p.node.left);
              //  }
            }
            if(p.node.right !=null) {
                Pair newPair = new Pair(p.level+1, p.node.right);
                q.add(newPair);
         //       if(map.containsKey(p.level+1)) {
                    map.put(p.level+1, p.node.right);
         //       }
            }
        }
        for (Map.Entry<Integer, Node> entry : map.entrySet()) {
           topView.add(entry.getValue().data);
        }
        
        return topView;
        // Code here
    }
