Approach:
Perform a DFS to calculate the height of the tree for each node.
Use a global variable to track the maximum diameter found during the traversal.
The diameter at each node is the sum of the left and right subtree heights, and the maximum value is returned.

TC:O(n)
SC:O(H)
if skew tree then O(n)
if balanced tree O(log(n))


class Solution {
    private int maxi = 0; // Global variable to store the maximum diameter

    public int diameterOfBinaryTree(TreeNode root) {
        dfsHeight(root);  // Start the DFS traversal from the root
        return maxi;      // Return the maximum diameter found
    }

    private int dfsHeight(TreeNode node) {
        if (node == null) {
            return 0;  // Base case: height of an empty tree is 0
        }
        int lh = dfsHeight(node.left);  // Height of the left subtree
        int rh = dfsHeight(node.right); // Height of the right subtree

        maxi = Math.max(maxi, lh + rh); // Update maxi with the diameter through the current node

        return 1 + Math.max(lh, rh); // Return the height of the current node
    }
}
