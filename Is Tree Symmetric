Use a recursive function to compare the left and right subtrees, starting from the root's children.
Ensure both subtrees are either null or have equal values at each level.
Recursively check if the left subtree of one tree mirrors the right subtree of the other, and vice versa.



class Solution {
    public boolean isSymmetric(TreeNode root) {
        if(root == null) {
            return true;
        }
        TreeNode root1 = root.left;
        TreeNode root2 = root.right;

        return isSymmetric(root1, root2);
    }

    public boolean isSymmetric(TreeNode root1, TreeNode root2) {
        if(root1 == null && root2 == null){
            return true;
        }

        if(root1==null || root2==null){
            return false;
        }

        if(root1.val != root2.val){
            return false;
        }
        
        return isSymmetric(root1.left, root2.right) && isSymmetric(root1.right, root2.left);
    }
}
